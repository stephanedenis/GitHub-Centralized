{
  "version": "1.0",
  "description": "Scripts Python pré-approuvés pour exécution autonome GitHub Copilot",
  "timestamp": "2025-10-01T05:36:00Z",
  "project": "PaniniFS-Research",
  
  "approved_patterns": {
    "extractors": {
      "pattern": "**/*_extractor.py",
      "description": "Scripts extraction métadonnées corpus/traducteurs/dhātu",
      "examples": [
        "translator_metadata_extractor.py",
        "corpus_metadata_extractor.py",
        "dhatu_metadata_extractor.py"
      ],
      "constraints": {
        "max_execution_time_seconds": 300,
        "required_args": [],
        "output_format": "json",
        "read_only": false
      }
    },
    
    "analyzers": {
      "pattern": "**/*_analyzer.py",
      "description": "Scripts analyse patterns biais/styles/symétries",
      "examples": [
        "translator_bias_style_analyzer.py",
        "symmetry_detector_poc.py",
        "ambiguity_analyzer_iterative.py",
        "analyseur_molecules_semantiques.py"
      ],
      "constraints": {
        "max_execution_time_seconds": 600,
        "required_input": "json",
        "output_format": "json",
        "read_only": true
      }
    },
    
    "validators": {
      "pattern": "**/*_validator.py",
      "description": "Scripts validation conformité ISO 8601/copilotage/PRs",
      "examples": [
        "validate_dates_iso.py",
        "autonomous_system_validator.py",
        "iso8601_compliance_validator.py",
        "pr_compliance_validator.py"
      ],
      "constraints": {
        "max_execution_time_seconds": 120,
        "read_only": true,
        "output_format": "json"
      }
    },
    
    "scanners": {
      "pattern": "scan_*.py",
      "description": "Scripts scan/collecte données projet",
      "examples": [
        "scan_real_panini_data.py",
        "activity_scanner_realtime.py"
      ],
      "constraints": {
        "max_execution_time_seconds": 300,
        "output_format": "json",
        "read_only": true
      }
    },
    
    "collectors": {
      "pattern": "collecteur_*.py",
      "description": "Scripts collecte corpus multilingues",
      "examples": [
        "collecteur_corpus_prescolaire.py",
        "collecteur_multilingue_dev.py"
      ],
      "constraints": {
        "max_execution_time_seconds": 1800,
        "output_format": "json",
        "read_only": false,
        "network_access": true
      }
    },
    
    "symmetry_detectors": {
      "pattern": "symmetry_*.py",
      "description": "Scripts détection symétries compose/decompose",
      "examples": [
        "symmetry_detector_poc.py",
        "symmetry_detector_real_data.py"
      ],
      "constraints": {
        "max_execution_time_seconds": 600,
        "output_format": "json",
        "read_only": true
      }
    },
    
    "orchestrators": {
      "pattern": "**/*_orchestrator.py",
      "description": "Scripts orchestration multi-agent (humain/copilot/colab/autonomous)",
      "examples": [
        "multi_agent_orchestrator.py"
      ],
      "constraints": {
        "max_execution_time_seconds": 10,
        "output_format": "json",
        "read_only": true,
        "reports_only": true
      }
    }
  },
  
  "approved_commands": {
    "python_execution": [
      {
        "pattern": "python3 {script_name}.py",
        "condition": "script_name matches approved_patterns",
        "auto_approve": true,
        "notes": "Auto-approuvé si pattern reconnu"
      },
      {
        "pattern": "python3 {script_name}.py {json_file}",
        "condition": "script_name matches approved_patterns AND json_file exists",
        "auto_approve": true,
        "notes": "Auto-approuvé avec argument JSON"
      },
      {
        "pattern": "python3 -c '{expression}'",
        "condition": "len(expression) < 100 AND no file operations AND no exec/eval",
        "auto_approve": true,
        "notes": "Expressions simples uniquement"
      }
    ],
    
    "data_operations": [
      {
        "pattern": "cat {filename}.json",
        "condition": "file exists AND file size < 51200 bytes (50KB)",
        "auto_approve": true,
        "notes": "Lecture JSON < 50KB"
      },
      {
        "pattern": "head -n {lines} {filename}",
        "condition": "lines <= 100",
        "auto_approve": true,
        "notes": "Aperçu fichiers"
      },
      {
        "pattern": "tail -n {lines} {filename}",
        "condition": "lines <= 100",
        "auto_approve": true,
        "notes": "Fin fichiers"
      },
      {
        "pattern": "jq '.' {filename}.json",
        "condition": "file exists AND file size < 102400 bytes (100KB)",
        "auto_approve": true,
        "notes": "Formatage JSON"
      },
      {
        "pattern": "wc -l {filename}",
        "condition": "file exists",
        "auto_approve": true,
        "notes": "Compter lignes"
      },
      {
        "pattern": "ls -lh {directory}",
        "condition": "directory within project",
        "auto_approve": true,
        "notes": "Lister fichiers"
      }
    ],
    
    "git_operations": [
      {
        "pattern": "git add {files}",
        "condition": "files generated by approved scripts OR new analysis files",
        "auto_approve": true,
        "notes": "Ajout fichiers générés"
      },
      {
        "pattern": "git commit -m '{message}'",
        "condition": "message includes timestamp ISO 8601",
        "auto_approve": true,
        "notes": "Commit avec timestamp conforme"
      },
      {
        "pattern": "git push origin main",
        "condition": "after successful commit",
        "auto_approve": true,
        "notes": "Push après commit validé"
      },
      {
        "pattern": "git status",
        "condition": "always",
        "auto_approve": true,
        "notes": "Status toujours approuvé"
      },
      {
        "pattern": "git log --oneline -n {count}",
        "condition": "count <= 20",
        "auto_approve": true,
        "notes": "Historique récent"
      },
      {
        "pattern": "git diff {file}",
        "condition": "file within project",
        "auto_approve": true,
        "notes": "Diff fichier"
      }
    ],
    
    "find_operations": [
      {
        "pattern": "find . -name '{pattern}' -type f",
        "condition": "no -exec AND no -delete",
        "auto_approve": true,
        "notes": "Recherche fichiers seulement"
      },
      {
        "pattern": "grep -r '{text}' {directory}",
        "condition": "directory within project",
        "auto_approve": true,
        "notes": "Recherche texte"
      }
    ]
  },
  
  "safety_constraints": {
    "forbidden_operations": [
      "rm -rf",
      "rm -f",
      "sudo",
      "chmod +x",
      "chmod 777",
      "eval",
      "exec",
      "curl | bash",
      "wget | sh",
      "> /dev/null 2>&1 &",
      "nohup",
      "kill",
      "pkill"
    ],
    
    "required_manual_approval": [
      {
        "operation": "file_deletion",
        "pattern": "rm {file}",
        "reason": "Deletion requires explicit confirmation"
      },
      {
        "operation": "directory_deletion",
        "pattern": "rmdir {dir}",
        "reason": "Directory removal requires confirmation"
      },
      {
        "operation": "external_network_calls",
        "pattern": "curl {url}",
        "reason": "Network access requires review",
        "exceptions": [
          "api.github.com",
          "api.openai.com"
        ]
      },
      {
        "operation": "package_installation",
        "pattern": "pip install {package}",
        "reason": "Dependency changes require review"
      },
      {
        "operation": "system_modifications",
        "pattern": "apt install {package}",
        "reason": "System changes require elevated review"
      },
      {
        "operation": "file_overwrite",
        "pattern": "echo {text} > {existing_file}",
        "reason": "Overwriting existing files requires confirmation"
      }
    ],
    
    "execution_limits": {
      "max_file_size_read": "1048576 bytes (1MB)",
      "max_file_size_write": "1048576 bytes (1MB)",
      "max_execution_time": "1800 seconds (30min)",
      "max_memory_usage": "2GB",
      "allowed_directories": [
        "/home/stephane/GitHub/PaniniFS-Research"
      ],
      "forbidden_directories": [
        "/",
        "/etc",
        "/var",
        "/usr",
        "/bin",
        "/sbin",
        "/home/stephane/.ssh"
      ]
    }
  },
  
  "logging": {
    "log_file": "autonomous_execution.log",
    "log_format": "json",
    "log_fields": [
      "timestamp",
      "command",
      "script_name",
      "approved_pattern",
      "execution_time_seconds",
      "exit_code",
      "output_size_bytes"
    ],
    "retention_days": 30
  },
  
  "metadata": {
    "maintainer": "Stéphane Denis",
    "repository": "stephanedenis/PaniniFS-Research",
    "last_updated": "2025-10-01T05:36:00Z",
    "version_history": [
      {
        "version": "1.0",
        "date": "2025-10-01",
        "changes": "Initial whitelist creation"
      }
    ]
  }
}
